/**
* 题目见：https://leetcode-cn.com/problems/longest-palindromic-substring/
**/

/** 方案：动态规划，时间复杂度O(n^2), 空间复杂度O(n^2) **/

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        if(!n) return "";
        vector<vector<int>> DP(n, vector<int>(n));
        int beginVis = 0, length = 1;

        for(int i = 0; i < n-1; i++){
            DP[i][i] = 1;
            if(s[i] == s[i+1]){
                DP[i][i+1] = 1;
                beginVis = i; length = 2;
            }
            else{
                DP[i][i+1] = 0;   
            }  
        }
        DP[n-1][n-1] = 1;

        for(int len = 3; len <= n; len++){
            for(int begin = 0; begin < n - len + 1; begin++){
                DP[begin][begin + len - 1] = DP[begin + 1][begin + len - 2] && (s[begin] == s[begin + len - 1]);
                if(DP[begin][begin + len - 1] && length < len){
                    beginVis = begin; length = len;
                }
            }
        }

        return s.substr(beginVis, length);
    }
};
